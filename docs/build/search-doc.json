[{"title":"Install","type":0,"sectionRef":"#","url":"docs/tutorial-basics/install","content":"Install To install this library and its peer deps, use on of the following commands: npm install -S remix-image yarn add remix-image Copy If you want to use a file-system cache, install: npm install -S hybrid-disk-cache yarn add hybrid-disk-cache Copy If you want to use this in a project deployed to Cloudflare Workers, install: npm install -S @cloudflare/kv-asset-handler yarn add @cloudflare/kv-asset-handler Copy If you want to use a faster image transformer, install: npm install -S sharp yarn add sharp Copy","keywords":""},{"title":"Component","type":0,"sectionRef":"#","url":"docs/component","content":"","keywords":""},{"title":"PropTypesâ€‹","type":1,"pageTitle":"Component","url":"docs/component#proptypes","content":"Name\tType\tRequired\tDefault\tDescriptionloaderUrl\tstring &quot;/api/image&quot;\tThe path of the image loader resource route. The loaderUrl prop is optional if the resource route has been created at the path &quot;/api/image&quot;. responsive\t{ size: { width: number; height: number; }; maxWidth?: number; }[] []\tAn array of responsive sizes. The resource route is not called if this prop is not provided. Note: The Image component extends the native img element, so any props used with img can be provided to the Image component. "},{"title":"Remix-Image","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"ðŸ‘‹ Introâ€‹","type":1,"pageTitle":"Remix-Image","url":"docs/intro#-intro","content":"A React component for responsive images in Remix. This library turns: &lt;Image src=&quot;https://i.imgur.com/5cQnAQC.png&quot; responsive={[{ size: { width: 100, height: 100, }, maxWidth: 200, }]} /&gt; Copy Into: &lt;img class=&quot;Image-module_root__56rgX&quot; src=&quot;/api/image?src=https%253A%252F%252Fi.imgur.com%252F5cQnAQC.png&amp;amp;width=100&amp;amp;height=100%2520100w&quot; srcset=&quot;/api/image?src=https%253A%252F%252Fi.imgur.com%252F5cQnAQC.png&amp;amp;width=100&amp;amp;height=100%2520100w&quot; sizes=&quot;(max-width: 200px) 100px&quot; &gt; Copy Where the responsive sizes provided through the props are turned into image URLs served by the local server that are cached for fast and performant loading. "},{"title":"ðŸš€ How to useâ€‹","type":1,"pageTitle":"Remix-Image","url":"docs/intro#-how-to-use","content":""},{"title":"Installâ€‹","type":1,"pageTitle":"Remix-Image","url":"docs/intro#install","content":"To install this library and its peer deps, use on of the following commands: npm install -S remix-image yarn add remix-image Copy "},{"title":"Create Loader","type":0,"sectionRef":"#","url":"docs/tutorial-basics/create-loader","content":"","keywords":""},{"title":"Cloudflare / Platforms Without File-System Accessâ€‹","type":1,"pageTitle":"Create Loader","url":"docs/tutorial-basics/create-loader#cloudflare--platforms-without-file-system-access","content":"Some platforms like Cloudflare Workers do not support file-systems and Node packages. In this case, several options need to be provided to the loader config, so take a look at these docs. "},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"docs/tutorial-basics/congratulations","content":"Congratulations! You have just learned the basics of Remix-Image and implemented it within your app. Remix-Image has much more to offer! Have 5 more minutes? Take a look at the documentation for loaders. Anything unclear or buggy in this tutorial? Please report it!","keywords":""},{"title":"Cloudflare","type":0,"sectionRef":"#","url":"docs/tutorial-extras/cloudflare","content":"","keywords":""},{"title":"What?â€‹","type":1,"pageTitle":"Cloudflare","url":"docs/tutorial-extras/cloudflare#what","content":"Some platforms like Cloudflare Workers do not support file-systems and Node packages. "},{"title":"Transformerâ€‹","type":1,"pageTitle":"Cloudflare","url":"docs/tutorial-extras/cloudflare#transformer","content":"To use remix-image on Cloudflare and similar, use MemoryCache and pureTransformer because they are pure JavaScript. Note: Because of bundling issues, you must import these helpers from remix-image/serverPure. import type { LoaderFunction } from &quot;remix&quot;; import { imageLoader, MemoryCache, pureTransformer } from &quot;remix-image/serverPure&quot;; const config = { selfUrl: &quot;http://localhost:3000&quot;, cache: new MemoryCache(), transformer: pureTransformer }; export const loader: LoaderFunction = ({ request }) =&gt; { return imageLoader(config, request); }; Copy Also, pureTransformer is used by default, it does not need to be specified in the config. This is only shown in the following example to show it must be used instead of other transformer options. "},{"title":"Resolverâ€‹","type":1,"pageTitle":"Cloudflare","url":"docs/tutorial-extras/cloudflare#resolver","content":"By default, remix-image will work on Cloudflare if all assets server are being fetched from another server. If you are trying to serve assets stored in your app's public directory, you must use the kvResolver. If you would like to use both fetchResolver and fsResolver, you can create a custom resolver as shown below: import { imageLoader, MemoryCache, kvResolver, fetchResolver, } from &quot;remix-image/serverPure&quot;; const whitelistedDomains = new Set([&quot;http://localhost:3000&quot;, &quot;i.imgur.com&quot;]); export const myResolver = async ( asset: string, url: string ): Promise&lt;{ buffer: Buffer; contentType: string; }&gt; =&gt; { if (asset.startsWith(&quot;/&quot;) &amp;&amp; (asset.length === 1 || asset[1] !== &quot;/&quot;)) { return kvResolver(asset, url); } else { if (!whitelistedDomains.has(new URL(url).host)) { throw new Error(&quot;Domain not allowed!&quot;); } return fetchResolver(asset, url); } }; const config = { selfUrl: &quot;http://localhost:3000&quot;, cache: new MemoryCache(), resolver: myResolver, }; export const loader: LoaderFunction = ({ request }) =&gt; { return imageLoader(config, request); }; Copy For an example project hosted on Cloudflare Workers, look at this example. "},{"title":"Use Hook","type":0,"sectionRef":"#","url":"docs/tutorial-extras/use-hook","content":"","keywords":""},{"title":"Parametersâ€‹","type":1,"pageTitle":"Use Hook","url":"docs/tutorial-extras/use-hook#parameters","content":"Name\tType\tRequired\tDefault\tDescriptionimgProps\tComponentPropsWithoutRef&lt;&quot;img&quot;&gt;\tX The props to be passed to the base img element. loaderUrl\tstring\tX\t[]\tThe path of the image loader resource route. responsive\t{ size: { width: number; height: number; }; maxWidth?: number; }[] []\tAn array of responsive sizes. "},{"title":"Hook","type":0,"sectionRef":"#","url":"docs/hook","content":"","keywords":""},{"title":"Parametersâ€‹","type":1,"pageTitle":"Hook","url":"docs/hook#parameters","content":"Name\tType\tRequired\tDefault\tDescriptionimgProps\tComponentPropsWithoutRef&lt;&quot;img&quot;&gt;\tX The props to be passed to the base img element. loaderUrl\tstring\tX\t[]\tThe path of the image loader resource route. responsive\t{ size: { width: number; height: number; }; maxWidth?: number; }[] []\tAn array of responsive sizes. "},{"title":"Use Component","type":0,"sectionRef":"#","url":"docs/tutorial-basics/use-component","content":"","keywords":""},{"title":"PropTypesâ€‹","type":1,"pageTitle":"Use Component","url":"docs/tutorial-basics/use-component#proptypes","content":"Name\tType\tRequired\tDefault\tDescriptionloaderUrl\tstring &quot;/api/image&quot;\tThe path of the image loader resource route. responsive\t{ size: { width: number; height: number; }; maxWidth?: number; }[] []\tAn array of responsive sizes. The resource route is not called if this prop is not provided. "},{"title":"Sharp","type":0,"sectionRef":"#","url":"docs/tutorial-extras/sharp","content":"","keywords":""},{"title":"What?â€‹","type":1,"pageTitle":"Sharp","url":"docs/tutorial-extras/sharp#what","content":"Sharp is a faster image transformer that uses native node packages. Replacing the default image with Sharp will greatly increase the performance of initial image transformations. However, Sharp because Sharp uses native node packages it cannot be used on Cloudflare, so it must be installed separately. If you would like to use Sharp, follow the steps below: "},{"title":"Install Sharpâ€‹","type":1,"pageTitle":"Sharp","url":"docs/tutorial-extras/sharp#install-sharp","content":"If you want to use a faster image transformer, install: npm install -S sharp yarn add sharp Copy "},{"title":"Add To Your Loader Configâ€‹","type":1,"pageTitle":"Sharp","url":"docs/tutorial-extras/sharp#add-to-your-loader-config","content":"Create a new resource route that imports the imageLoader function and exports as loader. By default, the image component uses the route &quot;/api/image&quot;, but any route can be used. import type { LoaderFunction } from &quot;remix&quot;; import { imageLoader, DiskCache, MemoryCache } from &quot;remix-image/server&quot;; import sharp from &quot;sharp&quot;; const config = { selfUrl: &quot;http://localhost:3000&quot;, cache: new DiskCache(), transformer: sharp }; export const loader: LoaderFunction = ({ request }) =&gt; { return imageLoader(config, request); }; Copy "},{"title":"Loader","type":0,"sectionRef":"#","url":"docs/loader","content":"","keywords":""},{"title":"Optionsâ€‹","type":1,"pageTitle":"Loader","url":"docs/loader#options","content":"Name\tType\tRequired\tDefault\tDescriptionselfUrl\tstring\tX The URL of the local server. cache\tCache The configuration for the local image cache. Setting this to null will disable the cache. transformer\tTransformer pureTransformer\tThe image transformation library to use. resolver\tResolver fetchResolver\tThe image resolver to use. "},{"title":"Cache Typesâ€‹","type":1,"pageTitle":"Loader","url":"docs/loader#cache-types","content":"Name\tDescription\tOptionsDiskCache\tA cache that stores images in memory and on disk (depending on size) for the best efficiency. To use, install the hybrid-disk-cache library from npm.\t{ path: string, ttl: number, tbd: number } MemoryCache\tA cache that only stores images in memory. Designed for platforms that do not have native disk access like Cloudflare.\t{ maxSize: number (bytes), ttl: number, tbd: number } Note:Due to remix request purging, MemoryCache will clear itself automatically on each request in development. This will not occur during production, and it will perform as expected. "},{"title":"Transformer Typesâ€‹","type":1,"pageTitle":"Loader","url":"docs/loader#transformer-types","content":"Name\tDescriptionpureTransformer\tThe default image transformer, supports all platforms at the cost of performance. sharp\tA faster image transformer that uses the file-system, offers the best performance. To use, install the sharp library from npm. "},{"title":"Resolver Typesâ€‹","type":1,"pageTitle":"Loader","url":"docs/loader#resolver-types","content":"Name\tDescriptionfetchResolver\tThe default image resolver, fetches images over the network. fsResolver\tAn image resolver that retrieves local images from the file-system. kvResolver\tA resolver for assets stored in Workers KV (for retrieving local images on Remix projects hosted on Cloudflare Workers.) To use, install the @cloudflare/kv-asset-handler library from npm. You can create a custom resolver by combining resolvers and passing this to the loader options: import { imageLoader, MemoryCache, fsResolver, fetchResolver, } from &quot;remix-image/server&quot;; export const myResolver = async ( asset: string, url: string ): Promise&lt;{ buffer: Buffer; contentType: string; }&gt; =&gt; { if (asset.startsWith(&quot;/&quot;) &amp;&amp; (asset.length === 1 || asset[1] !== &quot;/&quot;)) { return fsResolver(asset, url); } else { return fetchResolver(asset, url); } }; const config = { selfUrl: &quot;http://localhost:3000&quot;, cache: new MemoryCache(), resolver: myResolver, }; export const loader: LoaderFunction = ({ request }) =&gt; { return imageLoader(config, request); }; Copy "},{"title":"Cloudflare / Platforms Without File-System Accessâ€‹","type":1,"pageTitle":"Loader","url":"docs/loader#cloudflare--platforms-without-file-system-access","content":"Some platforms like Cloudflare Workers do not support file-systems and Node packages. In this case, several options need to be provided to the loader config, so take a look at these docs. "}]