"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[714],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),l=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(p.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?t.createElement(f,i(i({ref:r},u),{},{components:n})):t.createElement(f,i({ref:r},u))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6817:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},p="Sharp",l={unversionedId:"tutorial-extras/sharp",id:"tutorial-extras/sharp",title:"Sharp",description:"What?",source:"@site/docs/tutorial-extras/sharp.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/sharp",permalink:"/docs/tutorial-extras/sharp",editUrl:"https://github.com/Josh-McFarlin/remix-image/tree/master/docs/templates/shared/docs/tutorial-extras/sharp.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/docs/tutorial-basics/congratulations"},next:{title:"Cloudflare",permalink:"/docs/tutorial-extras/cloudflare"}},u=[{value:"What?",id:"what",children:[],level:2},{value:"Install Sharp",id:"install-sharp",children:[],level:2},{value:"Create Transformer",id:"create-transformer",children:[],level:2},{value:"Add To Your Loader Config",id:"add-to-your-loader-config",children:[],level:2}],c={toc:u};function m(e){var r=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sharp"},"Sharp"),(0,o.kt)("h2",{id:"what"},"What?"),(0,o.kt)("p",null,"Sharp is a faster image transformer that uses native node packages.\nReplacing the default image with Sharp will greatly increase the performance of initial image transformations.\nHowever, Sharp because Sharp uses native node packages it cannot be used on Cloudflare, so it must be installed separately.\nIf you would like to use Sharp, follow the steps below:"),(0,o.kt)("h2",{id:"install-sharp"},"Install Sharp"),(0,o.kt)("p",null,"If you want to use a faster image transformer, install:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -S sharp\nyarn add sharp\n")),(0,o.kt)("h2",{id:"create-transformer"},"Create Transformer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { MimeType, Transformer } from "remix-image";\nimport sharp from "sharp";\n\nconst supportedInputs = new Set([\n  MimeType.JPEG,\n  MimeType.PNG,\n  MimeType.WEBP,\n  MimeType.TIFF,\n]);\n\nconst supportedOutputs = new Set([MimeType.JPEG, MimeType.PNG, MimeType.WEBP]);\n\nexport const sharpTransformer: Transformer = {\n  name: "sharpTransformer",\n  supportedInputs,\n  supportedOutputs,\n  transform: async (\n    { data },\n    {\n      contentType: outputContentType,\n      width,\n      height,\n      fit,\n      position,\n      background,\n      quality,\n      compressionLevel,\n      loop,\n      delay,\n    }\n  ) => {\n    const image = sharp(data);\n\n    image\n      .resize(width, height, {\n        fit,\n        position,\n        ...(background && {\n          background: {\n            r: background[0],\n            g: background[1],\n            b: background[2],\n            alpha: background[3],\n          },\n        }),\n      })\n      .jpeg({\n        quality,\n        progressive: true,\n        force: outputContentType === MimeType.JPEG,\n      })\n      .png({\n        progressive: true,\n        compressionLevel,\n        force: outputContentType === MimeType.PNG,\n      })\n      // Possible, but requires additional sharp config\n      // .gif({\n      //   loop,\n      //   delay: delay ? [delay] : undefined,\n      //   force: outputContentType === MimeType.GIF,\n      // })\n      .webp({\n        quality,\n        force: outputContentType === MimeType.WEBP,\n      })\n      .tiff({\n        quality,\n        // cannot be displayed on browsers\n        force: false,\n      });\n\n    return image.toBuffer();\n  },\n};\n')),(0,o.kt)("h2",{id:"add-to-your-loader-config"},"Add To Your Loader Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import type { LoaderFunction } from "remix";\nimport { imageLoader, DiskCache, MemoryCache } from "remix-image/server";\nimport sharpTransformer from "...";\n\nconst config = {\n  selfUrl: "http://localhost:3000",\n  cache: new DiskCache(),\n  transformer: sharpTransformer\n};\n\nexport const loader: LoaderFunction = ({ request }) => {\n  return imageLoader(config, request);\n};\n')),(0,o.kt)("p",null,"For an example project using Sharp, look at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Josh-McFarlin/remix-image/tree/master/examples/sharp"},"this example"),"."))}m.isMDXComponent=!0}}]);