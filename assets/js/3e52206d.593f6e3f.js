"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[702],{3905:function(e,r,n){n.d(r,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,a,t=function(e,r){if(null==e)return{};var n,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=a.createContext({}),d=function(e){var r=a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},m=function(e){var r=d(e.components);return a.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},c=a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=t,g=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return n?a.createElement(g,i(i({ref:r},m),{},{components:n})):a.createElement(g,i({ref:r},m))}));function u(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},864:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return m},default:function(){return c}});var a=n(7462),t=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:8},s="ClientLoader",d={unversionedId:"client-loader",id:"client-loader",title:"ClientLoader",description:"Client Loader Functions are used to construct the URL for the Image and BaseImage components and the useResponsiveImage hook.",source:"@site/docs/client-loader.md",sourceDirName:".",slug:"/client-loader",permalink:"/docs/client-loader",editUrl:"https://github.com/Josh-McFarlin/remix-image/tree/master/docs/templates/shared/docs/client-loader.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Hook",permalink:"/docs/hook"}},m=[{value:"Supported Loaders",id:"supported-loaders",children:[{value:"Remix Image Loader",id:"remix-image-loader",children:[],level:3},{value:"Cloudflare Images Loader",id:"cloudflare-images-loader",children:[],level:3},{value:"Cloudinary Loader",id:"cloudinary-loader",children:[],level:3},{value:"Imgix Loader",id:"imgix-loader",children:[],level:3}],level:2},{value:"Usage",id:"usage",children:[{value:"<code>BaseImage</code> and <code>Image</code> Components",id:"baseimage-and-image-components",children:[],level:3},{value:"<code>useResponsiveImage</code> Hook",id:"useresponsiveimage-hook",children:[],level:3}],level:2}],p={toc:m};function c(e){var r=e.components,n=(0,t.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"clientloader"},"ClientLoader"),(0,o.kt)("p",null,"Client Loader Functions are used to construct the URL for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseImage")," components and the ",(0,o.kt)("inlineCode",{parentName:"p"},"useResponsiveImage")," hook."),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"remixImageLoader")," enables Remix-Image\u2019s advanced transformation options, which includes transformation caching and image operations such as ",(0,o.kt)("inlineCode",{parentName:"p"},"resize"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"crop"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"rotate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"blur"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"flip"),"."),(0,o.kt)("p",null,"However, using alternative (and likely paid) services and their client loaders may result in faster response times, as the Remix server will not be slowed down by requests for new image transformations."),(0,o.kt)("p",null,"We suggest trying the default ",(0,o.kt)("inlineCode",{parentName:"p"},"remixImageLoader")," function to see if it works for your apps, and then upgrade to a paid alternative if needed. Only websites with high traffic and/or many dynamic image assets will need an alternative client loader."),(0,o.kt)("h2",{id:"supported-loaders"},"Supported Loaders"),(0,o.kt)("h3",{id:"remix-image-loader"},"Remix Image Loader"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"remixImageLoader")," is the default loader used by Remix-Image. In most cases you will want to use this loader."),(0,o.kt)("h3",{id:"cloudflare-images-loader"},"Cloudflare Images Loader"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cloudflareImagesLoader")," is a loader used to transform images using the paid ",(0,o.kt)("a",{parentName:"p",href:"https://developers.cloudflare.com/images/"},"Cloudflare Images")," service. "),(0,o.kt)("h3",{id:"cloudinary-loader"},"Cloudinary Loader"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cloudinaryLoader")," is a loader used to transform images using the paid ",(0,o.kt)("a",{parentName:"p",href:"https://cloudinary.com/"},"Cloudinary")," service. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": Remember to set ",(0,o.kt)("inlineCode",{parentName:"p"},"loaderUrl")," to your API url! This should be a string similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://res.cloudinary.com/<cloud_name>/")),(0,o.kt)("h3",{id:"imgix-loader"},"Imgix Loader"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"imgixLoader")," is a loader used to transform images using the paid ",(0,o.kt)("a",{parentName:"p",href:"https://imgix.com/"},"Imgix")," service. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": Remember to set ",(0,o.kt)("inlineCode",{parentName:"p"},"loaderUrl")," to your API url! This should be a string similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://<subdomain>.imgix.net/")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"baseimage-and-image-components"},(0,o.kt)("inlineCode",{parentName:"h3"},"BaseImage")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"Image")," Components"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import { Image, remixImageLoader, cloudflareImagesLoader, cloudinaryLoader, imgixLoader } from "remix-image";\n\n<Image\n  loaderUrl="/api/image" // Required when using cloudinaryLoader or imgixLoader\n  loader={remixImageLoader or cloudflareImagesLoader or cloudinaryLoader or imgixLoader}\n  src="..."\n  width="..."\n  height="..."\n  alt="..."\n  responsive={[\n    {\n      size: {\n        width: 100,\n        height: 100,\n      },\n      maxWidth: 200,\n    },\n  ]}\n/>\n')),(0,o.kt)("h3",{id:"useresponsiveimage-hook"},(0,o.kt)("inlineCode",{parentName:"h3"},"useResponsiveImage")," Hook"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import { useResponsiveImage, remixImageLoader, cloudflareImagesLoader, cloudinaryLoader, imgixLoader } from "remix-image";\n\nconst Image: React.FC<ImageProps> = ({\n  className, \n  loaderUrl = "/api/image", // Required when using cloudinaryLoader or imgixLoader\n  responsive = [],\n  ...imgProps\n}) => {\n  const responsiveProps = useResponsiveImage(imgProps, responsive, [1], loaderUrl, remixImageLoader or cloudflareImagesLoader or cloudinaryLoader or imgixLoader);\n\n  return (\n    <img\n      className={clsx(classes.root, className)}\n      {...imgProps}\n      {...responsiveProps}\n    />\n  );\n};\n')))}c.isMDXComponent=!0}}]);