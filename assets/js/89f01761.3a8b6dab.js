"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[722],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,d=p["".concat(s,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2983:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={sidebar_position:1},s="Creating a Cache",l={unversionedId:"advanced/creating-a-cache",id:"advanced/creating-a-cache",title:"Creating a Cache",description:"You may want to create a Cache if you want to store transformed images on the server in a way that is not currently supported by this library.",source:"@site/docs/advanced/creating-a-cache.md",sourceDirName:"advanced",slug:"/advanced/creating-a-cache",permalink:"/docs/advanced/creating-a-cache",editUrl:"https://github.com/Josh-McFarlin/remix-image/tree/master/docs/templates/shared/docs/advanced/creating-a-cache.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Cloudflare",permalink:"/docs/tutorial-extras/cloudflare"},next:{title:"Creating a Resolver",permalink:"/docs/advanced/creating-a-resolver"}},u=[{value:"Instructions",id:"instructions",children:[],level:2},{value:"Examples",id:"examples",children:[],level:2},{value:"Show Off",id:"show-off",children:[],level:2}],m={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-cache"},"Creating a Cache"),(0,o.kt)("p",null,"You may want to create a Cache if you want to ",(0,o.kt)("strong",{parentName:"p"},"store")," transformed images on the server in a way that is not currently supported by this library.\nAn example could be storing images in a Cloud storage provider such as AWS S3 or Google Cloud Storage."),(0,o.kt)("h2",{id:"instructions"},"Instructions"),(0,o.kt)("p",null,"To make your own, just make a class that follows the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Josh-McFarlin/remix-image/blob/master/src/types/cache.ts"},"Cache format"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface CacheConfig {\n  /**\n   * Time To Live: how long a key should remain in the cache\n   */\n  ttl: number;\n  /**\n   * Time Before Deletion: how long a key should remain in the cache after expired (ttl)\n   */\n  tbd: number;\n}\n\nexport enum CacheStatus {\n  /**\n   * The cache contains the key and it has not yet expired\n   */\n  HIT = "hit",\n  /**\n   * The cache contains the key but it has expired\n   */\n  STALE = "stale",\n  /**\n   * The cache does not contain the key\n   */\n  MISS = "miss",\n}\n\nexport abstract class Cache {\n  abstract config: CacheConfig;\n\n  abstract has(key: string): Promise<boolean>;\n\n  abstract status(key: string): Promise<CacheStatus>;\n\n  abstract get(key: string): Promise<Uint8Array | null>;\n\n  abstract set(key: string, resultImg: Uint8Array): Promise<void>;\n\n  abstract clear(): Promise<void>;\n}\n')),(0,o.kt)("p",null,"You will then provide an instance of this class to the ",(0,o.kt)("inlineCode",{parentName:"p"},"cache")," field of the \u2018loader\u2019 config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import type { LoaderFunction } from "remix";\nimport { imageLoader } from "remix-image/server";\nimport MyCache from "...";\n\nconst config = {\n  selfUrl: "http://localhost:3000",\n  whitelistedDomains: ["i.imgur.com"],\n  cache: new MyCache(),\n};\n\nexport const loader: LoaderFunction = ({ request }) => {\n  return imageLoader(config, request);\n};\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Josh-McFarlin/remix-image/tree/master/src/server/caches/diskCache"},"diskCache")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Josh-McFarlin/remix-image/tree/master/src/server/caches/memoryCache"},"memoryCache"))),(0,o.kt)("h2",{id:"show-off"},"Show Off"),(0,o.kt)("p",null,"Create something cool that you think others would use? Upload it to GitHub and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Josh-McFarlin/remix-image/discussions/3"},"show it off on the Remix-Image repo"),"!"))}p.isMDXComponent=!0}}]);